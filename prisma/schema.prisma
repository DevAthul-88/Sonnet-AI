generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ChatStatus {
  PRIVATE
  PUBLIC
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String   @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  role          String    @default("USER") // Previously an enum, now a String

  accounts Account[]
  sessions Session[]
  chats    Chat[]
  messages Message[]

  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Chat {
  id        String    @id @default(cuid()) @map("_id")
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    String    @default("PRIVATE")
  archived  Boolean   @default(false)
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]

  @@index([userId])
}

model Message {
  id        String   @id @default(cuid()) @map("_id")
  message   String // User's input message
  content   String // AI's response content
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type_u    String   @default("user")

  @@index([chatId, userId])
}
